generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String     @unique
  name       String?    @db.VarChar(35)
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  is_private Boolean    @default(false)
  followers  Follow[]   @relation("followers")
  follows    Follow[]   @relation("follows")
  posts      Post[]
  reactions  Reaction[]
}

model Follow {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId String    @db.Uuid
  followedId String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  followed   User      @relation("followers", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User      @relation("follows", fields: [followerId], references: [id], onDelete: Cascade)
}

model Post {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId    String     @db.Uuid
  content     String     @db.VarChar(240)
  images      String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  isComment   Boolean    @default(false)
  parentId    String?    @db.Uuid
  qtyComments Int        @default(0)
  qtyLikes    Int        @default(0)
  qtyRetweets Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
}

model Reaction {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String       @db.Uuid
  postId    String       @db.Uuid
  type      ReactionType
  createdAt DateTime     @default(now())
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReactionType {
  LIKE
  RETWEET
}
